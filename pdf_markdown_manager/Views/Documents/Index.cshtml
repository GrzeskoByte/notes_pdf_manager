@using Microsoft.AspNetCore.Identity
@using pdf_markdown_manager.Models

@model IEnumerable<pdf_markdown_manager.Models.Documents>

@inject SignInManager<AuthUser> SignInManager
@inject UserManager<AuthUser> UserManager


@{
    ViewData["Title"] = "Index";
}

<div class="d-flex justify-content-between w-100 m-2 mb-5">
    <h1 class="h1">Twoje notatki</h1>
    @if (SignInManager.IsSignedIn(User))
    {
         <button class="btn btn-primary" asp-action="Create">
            <a asp-action="Create">Dodaj notatke</a>
        </button>
    }
</div>


    @if (SignInManager.IsSignedIn(User))
    {


    <form method="post" asp-action="Search">
   
    <div class="input-group input-group-sm mb-3">
        <input type="text" class="form-control" aria-label="Small" aria-describedby="inputGroup-sizing-sm" placeholder="Wyszukaj notatkę" name="searchTerm">
        <div class="input-group-prepend">
        <button class="btn btn-primary" type="submit">Szukaj</button>
        </div>
    </div>


    </form>

    <div class="btn-group mb-2">
        <p class="mr-5">Sortowanie</p>
        <select class="form-select" id="sort-select">
            <option value="Tytuł" selected>Po nazwie</option>
            <option value="Stworzone">Po dacie</option>
        </select>
        <button type="button" class="btn btn-outline-secondary btn-sm" onclick="sortTable('desc')">Malejąco<i class="fas fa-sort"></i></button>
        <button type="button" class="btn btn-outline-secondary btn-sm" onclick="sortTable('asc')">Rosnąca <i class="fas fa-sort"></i></button>
    </div>



<table class="table table-bordered">
    <thead class="table-dark">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.title)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.content)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.font_size)
            </th>

                @if (User.IsInRole("Admin"))
                {
                    
                <th>
                @Html.DisplayNameFor(model => model.users_id)
            </th>
                }
            <th>
                @Html.DisplayNameFor(model=>model.created_at)
            </th>
            <th>
            </th>
        </tr>
    </thead>
    <tbody>

@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.title)
            </td>
            <td class="mh-10">
                    <span class="d-inline-block text-truncate" style="max-width:30vw;">
                         @Html.DisplayFor(modelItem => item.content)
                    </span>
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.font_size)
            </td>
                    @if (User.IsInRole("Admin"))
                    {

            <td>
                @Html.DisplayFor(modelItem => item.users_id)
            </td>
                    }
            <td>

                @Html.DisplayFor(modelItem => item.created_at)
            </td>
             <td class="p-3 d-flex flex-row justify-content-between align-items-center h-100">
                <button type="button" class="btn btn-primary">
                    <a asp-action="Edit" asp-route-id="@item.id">Edytuj</a> 
                </button>
                <button type="button" class="btn btn-info">
                    <a asp-action="Details" asp-route-id="@item.id">Szczegóły</a> 
                </button>
                <button type="button" class="btn btn-danger">
                    <a asp-action="Delete" asp-route-id="@item.id">Usuń</a>
                </button>
                <button type="button" class="btn btn-dark">
                    <a asp-action="PrintDocument" asp-route-id="@item.id">Generuj</a>
                </button>

            </td>
        </tr>
}
    </tbody>
    </table>

}else
{
    <div class="alert alert-danger" role="alert">
        Proszę się zalogować aby uzyskać listę notatek.
    </div>
}

<script>
    function sortTable(order = "desc") {
        const criteria = document.getElementById("sort-select").value;
        const table = document.querySelector('table');
        const tbody = table.querySelector('tbody');
        const rows = Array.from(tbody.querySelectorAll('tr'));


        rows.sort(function (rowA, rowB) {
            const cellA = rowA.querySelector('td:nth-child(' + (getColumnIndex(criteria) + 1) + ')').innerText.trim();
            const cellB = rowB.querySelector('td:nth-child(' + (getColumnIndex(criteria) + 1) + ')').innerText.trim();

            if (criteria === 'Stworzone') {
                const dateA = new Date(cellA.split("/").reverse().join("-"));
                const dateB = new Date(cellB.split("/").reverse().join("-"));

                const timeA = dateA.getTime();
                const timeB = dateB.getTime();

                if (isNaN(timeA) && isNaN(timeB)) {
                    return 0; 
                } else if (isNaN(timeA)) {
                    return order === 'asc' ? -1 : 1; 
                } else if (isNaN(timeB)) {
                    return order==='asc' ? 1 : -1;
                }

                return order==='asc' ? timeA - timeB : timeB - timeA;

            }

            return cellA.localeCompare(cellB);
        });
        
        if (order === 'asc' && criteria ==='Tytuł') rows.reverse();


        while (tbody.firstChild) {
            tbody.removeChild(tbody.firstChild);
        }

        rows.forEach(function (row) {
            tbody.appendChild(row);
        });

    }

    function getColumnIndex(criteria) {
        switch (criteria) {
            case 'Tytuł':
                return 0;
            case "Stworzone":
                return 4;
             default:
                return 0;
        }
    }
</script>
